//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from XPath1W3.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class XPath1W3Parser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, Literal=44, NumericLiteral=45, 
		PITest=46, StringLiteral=47, IntegerLiteral=48, DecimalLiteral=49, Number=50, 
		Digits=51, AxisName=52, LiteralChar=53, WS=54, NCName=55, NCNameStartChar=56, 
		NCNameChar=57;
	public const int
		RULE_start = 0, RULE_exprSingle = 1, RULE_operatorExpr = 2, RULE_orExpr = 3, 
		RULE_andExpr = 4, RULE_equalityExpr = 5, RULE_relationalExpr = 6, RULE_additiveExpr = 7, 
		RULE_multiplicativeExpr = 8, RULE_unaryExpr = 9, RULE_unionExpr = 10, 
		RULE_valueExpr = 11, RULE_pathExpr = 12, RULE_relativePathExpr = 13, RULE_stepExpr = 14, 
		RULE_axisStep = 15, RULE_forwardStep = 16, RULE_forwardAxis = 17, RULE_abbrevForwardStep = 18, 
		RULE_reverseStep = 19, RULE_reverseAxis = 20, RULE_abbrevReverseStep = 21, 
		RULE_nodeTest = 22, RULE_nameTest = 23, RULE_wildCard = 24, RULE_predicate = 25, 
		RULE_primaryExpr = 26, RULE_varRef = 27, RULE_varName = 28, RULE_parenthesizedExpr = 29, 
		RULE_contextItemExpr = 30, RULE_functionCall = 31, RULE_kindTest = 32, 
		RULE_anyKindTest = 33, RULE_textTest = 34, RULE_commentTest = 35, RULE_nCName = 36, 
		RULE_qName = 37, RULE_functionQName = 38;
	public static readonly string[] ruleNames = {
		"start", "exprSingle", "operatorExpr", "orExpr", "andExpr", "equalityExpr", 
		"relationalExpr", "additiveExpr", "multiplicativeExpr", "unaryExpr", "unionExpr", 
		"valueExpr", "pathExpr", "relativePathExpr", "stepExpr", "axisStep", "forwardStep", 
		"forwardAxis", "abbrevForwardStep", "reverseStep", "reverseAxis", "abbrevReverseStep", 
		"nodeTest", "nameTest", "wildCard", "predicate", "primaryExpr", "varRef", 
		"varName", "parenthesizedExpr", "contextItemExpr", "functionCall", "kindTest", 
		"anyKindTest", "textTest", "commentTest", "nCName", "qName", "functionQName"
	};

	private static readonly string[] _LiteralNames = {
		null, "'or'", "'and'", "'='", "'!='", "'<'", "'>'", "'<='", "'>='", "'+'", 
		"'-'", "'*'", "'div'", "'mod'", "'|'", "'/'", "'//'", "'child'", "'::'", 
		"'descendant'", "'attribute'", "'self'", "'descendant-or-self'", "'following-sibling'", 
		"'following'", "'namespace'", "'@'", "'parent'", "'ancestor'", "'preceding-sibling'", 
		"'preceding'", "'ancestor-or-self'", "'..'", "':'", "'['", "']'", "'$'", 
		"'('", "')'", "'.'", "','", "'node'", "'test'", "'comment'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "Literal", "NumericLiteral", 
		"PITest", "StringLiteral", "IntegerLiteral", "DecimalLiteral", "Number", 
		"Digits", "AxisName", "LiteralChar", "WS", "NCName", "NCNameStartChar", 
		"NCNameChar"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "XPath1W3.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public XPath1W3Parser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartContext : ParserRuleContext {
		public ExprSingleContext exprSingle() {
			return GetRuleContext<ExprSingleContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(XPath1W3Parser.Eof, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			State = 80;
			switch (TokenStream.La(1)) {
			case T__0:
			case T__1:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__14:
			case T__15:
			case T__16:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__35:
			case T__36:
			case T__38:
			case T__40:
			case T__41:
			case T__42:
			case Literal:
			case PITest:
			case AxisName:
			case NCName:
				EnterOuterAlt(_localctx, 1);
				{
				State = 78; exprSingle();
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				State = 79; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprSingleContext : ParserRuleContext {
		public OrExprContext orExpr() {
			return GetRuleContext<OrExprContext>(0);
		}
		public ExprSingleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprSingle; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprSingle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprSingleContext exprSingle() {
		ExprSingleContext _localctx = new ExprSingleContext(Context, State);
		EnterRule(_localctx, 2, RULE_exprSingle);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; orExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorExprContext : ParserRuleContext {
		public OrExprContext orExpr() {
			return GetRuleContext<OrExprContext>(0);
		}
		public OperatorExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorExprContext operatorExpr() {
		OperatorExprContext _localctx = new OperatorExprContext(Context, State);
		EnterRule(_localctx, 4, RULE_operatorExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; orExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExprContext : ParserRuleContext {
		public AndExprContext[] andExpr() {
			return GetRuleContexts<AndExprContext>();
		}
		public AndExprContext andExpr(int i) {
			return GetRuleContext<AndExprContext>(i);
		}
		public OrExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExprContext orExpr() {
		OrExprContext _localctx = new OrExprContext(Context, State);
		EnterRule(_localctx, 6, RULE_orExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; andExpr();
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__0) {
				{
				{
				State = 87; Match(T__0);
				State = 88; andExpr();
				}
				}
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExprContext : ParserRuleContext {
		public EqualityExprContext[] equalityExpr() {
			return GetRuleContexts<EqualityExprContext>();
		}
		public EqualityExprContext equalityExpr(int i) {
			return GetRuleContext<EqualityExprContext>(i);
		}
		public AndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExprContext andExpr() {
		AndExprContext _localctx = new AndExprContext(Context, State);
		EnterRule(_localctx, 8, RULE_andExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; equalityExpr();
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__1) {
				{
				{
				State = 95; Match(T__1);
				State = 96; equalityExpr();
				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExprContext : ParserRuleContext {
		public RelationalExprContext[] relationalExpr() {
			return GetRuleContexts<RelationalExprContext>();
		}
		public RelationalExprContext relationalExpr(int i) {
			return GetRuleContext<RelationalExprContext>(i);
		}
		public EqualityExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExprContext equalityExpr() {
		EqualityExprContext _localctx = new EqualityExprContext(Context, State);
		EnterRule(_localctx, 10, RULE_equalityExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; relationalExpr();
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__2 || _la==T__3) {
				{
				{
				State = 103;
				_la = TokenStream.La(1);
				if ( !(_la==T__2 || _la==T__3) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 104; relationalExpr();
				}
				}
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExprContext : ParserRuleContext {
		public AdditiveExprContext[] additiveExpr() {
			return GetRuleContexts<AdditiveExprContext>();
		}
		public AdditiveExprContext additiveExpr(int i) {
			return GetRuleContext<AdditiveExprContext>(i);
		}
		public RelationalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExprContext relationalExpr() {
		RelationalExprContext _localctx = new RelationalExprContext(Context, State);
		EnterRule(_localctx, 12, RULE_relationalExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; additiveExpr();
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7))) != 0)) {
				{
				{
				State = 111;
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 112; additiveExpr();
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExprContext : ParserRuleContext {
		public MultiplicativeExprContext[] multiplicativeExpr() {
			return GetRuleContexts<MultiplicativeExprContext>();
		}
		public MultiplicativeExprContext multiplicativeExpr(int i) {
			return GetRuleContext<MultiplicativeExprContext>(i);
		}
		public AdditiveExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExprContext additiveExpr() {
		AdditiveExprContext _localctx = new AdditiveExprContext(Context, State);
		EnterRule(_localctx, 14, RULE_additiveExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; multiplicativeExpr();
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__8 || _la==T__9) {
				{
				{
				State = 119;
				_la = TokenStream.La(1);
				if ( !(_la==T__8 || _la==T__9) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 120; multiplicativeExpr();
				}
				}
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExprContext : ParserRuleContext {
		public UnaryExprContext[] unaryExpr() {
			return GetRuleContexts<UnaryExprContext>();
		}
		public UnaryExprContext unaryExpr(int i) {
			return GetRuleContext<UnaryExprContext>(i);
		}
		public MultiplicativeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExprContext multiplicativeExpr() {
		MultiplicativeExprContext _localctx = new MultiplicativeExprContext(Context, State);
		EnterRule(_localctx, 16, RULE_multiplicativeExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126; unaryExpr();
			State = 129;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__11) | (1L << T__12))) != 0)) {
				{
				State = 127;
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__11) | (1L << T__12))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 128; unaryExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExprContext : ParserRuleContext {
		public UnionExprContext unionExpr() {
			return GetRuleContext<UnionExprContext>(0);
		}
		public UnaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExprContext unaryExpr() {
		UnaryExprContext _localctx = new UnaryExprContext(Context, State);
		EnterRule(_localctx, 18, RULE_unaryExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__9) {
				{
				{
				State = 131; Match(T__9);
				}
				}
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 137; unionExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionExprContext : ParserRuleContext {
		public ValueExprContext[] valueExpr() {
			return GetRuleContexts<ValueExprContext>();
		}
		public ValueExprContext valueExpr(int i) {
			return GetRuleContext<ValueExprContext>(i);
		}
		public UnionExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionExprContext unionExpr() {
		UnionExprContext _localctx = new UnionExprContext(Context, State);
		EnterRule(_localctx, 20, RULE_unionExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; valueExpr();
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__13) {
				{
				{
				State = 140; Match(T__13);
				State = 141; valueExpr();
				}
				}
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueExprContext : ParserRuleContext {
		public PathExprContext pathExpr() {
			return GetRuleContext<PathExprContext>(0);
		}
		public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		public RelativePathExprContext relativePathExpr() {
			return GetRuleContext<RelativePathExprContext>(0);
		}
		public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public ValueExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueExprContext valueExpr() {
		ValueExprContext _localctx = new ValueExprContext(Context, State);
		EnterRule(_localctx, 22, RULE_valueExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				{
				{
				State = 147; primaryExpr();
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==T__33) {
					{
					{
					State = 148; predicate();
					}
					}
					State = 153;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				State = 156;
				_la = TokenStream.La(1);
				if (_la==T__14 || _la==T__15) {
					{
					State = 154;
					_la = TokenStream.La(1);
					if ( !(_la==T__14 || _la==T__15) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					State = 155; relativePathExpr();
					}
				}

				}
				}
				break;
			case 2:
				{
				State = 158; pathExpr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathExprContext : ParserRuleContext {
		public RelativePathExprContext relativePathExpr() {
			return GetRuleContext<RelativePathExprContext>(0);
		}
		public PathExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathExprContext pathExpr() {
		PathExprContext _localctx = new PathExprContext(Context, State);
		EnterRule(_localctx, 24, RULE_pathExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			switch (TokenStream.La(1)) {
			case T__14:
				{
				{
				State = 161; Match(T__14);
				State = 163;
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 162; relativePathExpr();
					}
					break;
				}
				}
				}
				break;
			case T__15:
				{
				{
				State = 165; Match(T__15);
				State = 166; relativePathExpr();
				}
				}
				break;
			case T__10:
			case T__16:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__38:
			case T__40:
			case T__41:
			case T__42:
			case PITest:
			case AxisName:
			case NCName:
				{
				State = 167; relativePathExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelativePathExprContext : ParserRuleContext {
		public StepExprContext[] stepExpr() {
			return GetRuleContexts<StepExprContext>();
		}
		public StepExprContext stepExpr(int i) {
			return GetRuleContext<StepExprContext>(i);
		}
		public RelativePathExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relativePathExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelativePathExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelativePathExprContext relativePathExpr() {
		RelativePathExprContext _localctx = new RelativePathExprContext(Context, State);
		EnterRule(_localctx, 26, RULE_relativePathExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; stepExpr();
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__14 || _la==T__15) {
				{
				{
				State = 171;
				_la = TokenStream.La(1);
				if ( !(_la==T__14 || _la==T__15) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 172; stepExpr();
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StepExprContext : ParserRuleContext {
		public AxisStepContext axisStep() {
			return GetRuleContext<AxisStepContext>(0);
		}
		public ContextItemExprContext contextItemExpr() {
			return GetRuleContext<ContextItemExprContext>(0);
		}
		public AbbrevReverseStepContext abbrevReverseStep() {
			return GetRuleContext<AbbrevReverseStepContext>(0);
		}
		public StepExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepExprContext stepExpr() {
		StepExprContext _localctx = new StepExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_stepExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			switch (TokenStream.La(1)) {
			case T__10:
			case T__16:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__40:
			case T__41:
			case T__42:
			case PITest:
			case AxisName:
			case NCName:
				{
				State = 178; axisStep();
				}
				break;
			case T__38:
				{
				State = 179; contextItemExpr();
				}
				break;
			case T__31:
				{
				State = 180; abbrevReverseStep();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AxisStepContext : ParserRuleContext {
		public ReverseStepContext reverseStep() {
			return GetRuleContext<ReverseStepContext>(0);
		}
		public ForwardStepContext forwardStep() {
			return GetRuleContext<ForwardStepContext>(0);
		}
		public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public AxisStepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_axisStep; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAxisStep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AxisStepContext axisStep() {
		AxisStepContext _localctx = new AxisStepContext(Context, State);
		EnterRule(_localctx, 30, RULE_axisStep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			switch (TokenStream.La(1)) {
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
				{
				State = 183; reverseStep();
				}
				break;
			case T__10:
			case T__16:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__40:
			case T__41:
			case T__42:
			case PITest:
			case AxisName:
			case NCName:
				{
				State = 184; forwardStep();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__33) {
				{
				{
				State = 187; predicate();
				}
				}
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForwardStepContext : ParserRuleContext {
		public AbbrevForwardStepContext abbrevForwardStep() {
			return GetRuleContext<AbbrevForwardStepContext>(0);
		}
		public ForwardAxisContext forwardAxis() {
			return GetRuleContext<ForwardAxisContext>(0);
		}
		public NodeTestContext nodeTest() {
			return GetRuleContext<NodeTestContext>(0);
		}
		public ForwardStepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forwardStep; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForwardStep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForwardStepContext forwardStep() {
		ForwardStepContext _localctx = new ForwardStepContext(Context, State);
		EnterRule(_localctx, 32, RULE_forwardStep);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			switch (TokenStream.La(1)) {
			case T__16:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
				{
				{
				State = 193; forwardAxis();
				State = 194; nodeTest();
				}
				}
				break;
			case T__10:
			case T__25:
			case T__40:
			case T__41:
			case T__42:
			case PITest:
			case AxisName:
			case NCName:
				{
				State = 196; abbrevForwardStep();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForwardAxisContext : ParserRuleContext {
		public ForwardAxisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forwardAxis; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForwardAxis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForwardAxisContext forwardAxis() {
		ForwardAxisContext _localctx = new ForwardAxisContext(Context, State);
		EnterRule(_localctx, 34, RULE_forwardAxis);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			switch (TokenStream.La(1)) {
			case T__16:
				{
				{
				State = 199; Match(T__16);
				State = 200; Match(T__17);
				}
				}
				break;
			case T__18:
				{
				{
				State = 201; Match(T__18);
				State = 202; Match(T__17);
				}
				}
				break;
			case T__19:
				{
				{
				State = 203; Match(T__19);
				State = 204; Match(T__17);
				}
				}
				break;
			case T__20:
				{
				{
				State = 205; Match(T__20);
				State = 206; Match(T__17);
				}
				}
				break;
			case T__21:
				{
				{
				State = 207; Match(T__21);
				State = 208; Match(T__17);
				}
				}
				break;
			case T__22:
				{
				{
				State = 209; Match(T__22);
				State = 210; Match(T__17);
				}
				}
				break;
			case T__23:
				{
				{
				State = 211; Match(T__23);
				State = 212; Match(T__17);
				}
				}
				break;
			case T__24:
				{
				{
				State = 213; Match(T__24);
				State = 214; Match(T__17);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbbrevForwardStepContext : ParserRuleContext {
		public NodeTestContext nodeTest() {
			return GetRuleContext<NodeTestContext>(0);
		}
		public AbbrevForwardStepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abbrevForwardStep; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbbrevForwardStep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbbrevForwardStepContext abbrevForwardStep() {
		AbbrevForwardStepContext _localctx = new AbbrevForwardStepContext(Context, State);
		EnterRule(_localctx, 36, RULE_abbrevForwardStep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			_la = TokenStream.La(1);
			if (_la==T__25) {
				{
				State = 217; Match(T__25);
				}
			}

			State = 220; nodeTest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReverseStepContext : ParserRuleContext {
		public ReverseAxisContext reverseAxis() {
			return GetRuleContext<ReverseAxisContext>(0);
		}
		public NodeTestContext nodeTest() {
			return GetRuleContext<NodeTestContext>(0);
		}
		public ReverseStepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reverseStep; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReverseStep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReverseStepContext reverseStep() {
		ReverseStepContext _localctx = new ReverseStepContext(Context, State);
		EnterRule(_localctx, 38, RULE_reverseStep);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 222; reverseAxis();
			State = 223; nodeTest();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReverseAxisContext : ParserRuleContext {
		public ReverseAxisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reverseAxis; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReverseAxis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReverseAxisContext reverseAxis() {
		ReverseAxisContext _localctx = new ReverseAxisContext(Context, State);
		EnterRule(_localctx, 40, RULE_reverseAxis);
		try {
			State = 235;
			switch (TokenStream.La(1)) {
			case T__26:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 225; Match(T__26);
				State = 226; Match(T__17);
				}
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 227; Match(T__27);
				State = 228; Match(T__17);
				}
				}
				break;
			case T__28:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 229; Match(T__28);
				State = 230; Match(T__17);
				}
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 231; Match(T__29);
				State = 232; Match(T__17);
				}
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 233; Match(T__30);
				State = 234; Match(T__17);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbbrevReverseStepContext : ParserRuleContext {
		public AbbrevReverseStepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abbrevReverseStep; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbbrevReverseStep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbbrevReverseStepContext abbrevReverseStep() {
		AbbrevReverseStepContext _localctx = new AbbrevReverseStepContext(Context, State);
		EnterRule(_localctx, 42, RULE_abbrevReverseStep);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237; Match(T__31);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeTestContext : ParserRuleContext {
		public KindTestContext kindTest() {
			return GetRuleContext<KindTestContext>(0);
		}
		public NameTestContext nameTest() {
			return GetRuleContext<NameTestContext>(0);
		}
		public NodeTestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodeTest; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodeTest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodeTestContext nodeTest() {
		NodeTestContext _localctx = new NodeTestContext(Context, State);
		EnterRule(_localctx, 44, RULE_nodeTest);
		try {
			State = 241;
			switch (TokenStream.La(1)) {
			case T__40:
			case T__41:
			case T__42:
			case PITest:
				EnterOuterAlt(_localctx, 1);
				{
				State = 239; kindTest();
				}
				break;
			case T__10:
			case AxisName:
			case NCName:
				EnterOuterAlt(_localctx, 2);
				{
				State = 240; nameTest();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameTestContext : ParserRuleContext {
		public QNameContext qName() {
			return GetRuleContext<QNameContext>(0);
		}
		public WildCardContext wildCard() {
			return GetRuleContext<WildCardContext>(0);
		}
		public NameTestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameTest; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameTest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameTestContext nameTest() {
		NameTestContext _localctx = new NameTestContext(Context, State);
		EnterRule(_localctx, 46, RULE_nameTest);
		try {
			State = 245;
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243; qName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 244; wildCard();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WildCardContext : ParserRuleContext {
		public ITerminalNode NCName() { return GetToken(XPath1W3Parser.NCName, 0); }
		public WildCardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildCard; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildCard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WildCardContext wildCard() {
		WildCardContext _localctx = new WildCardContext(Context, State);
		EnterRule(_localctx, 48, RULE_wildCard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			switch (TokenStream.La(1)) {
			case T__10:
				{
				State = 247; Match(T__10);
				}
				break;
			case NCName:
				{
				State = 248; Match(NCName);
				State = 249; Match(T__32);
				State = 250; Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ExprSingleContext exprSingle() {
			return GetRuleContext<ExprSingleContext>(0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 50, RULE_predicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253; Match(T__33);
			State = 254; exprSingle();
			State = 255; Match(T__34);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExprContext : ParserRuleContext {
		public ITerminalNode Literal() { return GetToken(XPath1W3Parser.Literal, 0); }
		public VarRefContext varRef() {
			return GetRuleContext<VarRefContext>(0);
		}
		public ParenthesizedExprContext parenthesizedExpr() {
			return GetRuleContext<ParenthesizedExprContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public PrimaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExprContext primaryExpr() {
		PrimaryExprContext _localctx = new PrimaryExprContext(Context, State);
		EnterRule(_localctx, 52, RULE_primaryExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			switch (TokenStream.La(1)) {
			case Literal:
				{
				State = 257; Match(Literal);
				}
				break;
			case T__35:
				{
				State = 258; varRef();
				}
				break;
			case T__36:
				{
				State = 259; parenthesizedExpr();
				}
				break;
			case T__0:
			case T__1:
			case T__11:
			case T__12:
			case T__16:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case AxisName:
			case NCName:
				{
				State = 260; functionCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarRefContext : ParserRuleContext {
		public VarNameContext varName() {
			return GetRuleContext<VarNameContext>(0);
		}
		public VarRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varRef; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarRefContext varRef() {
		VarRefContext _localctx = new VarRefContext(Context, State);
		EnterRule(_localctx, 54, RULE_varRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263; Match(T__35);
			State = 264; varName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarNameContext : ParserRuleContext {
		public QNameContext qName() {
			return GetRuleContext<QNameContext>(0);
		}
		public VarNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarNameContext varName() {
		VarNameContext _localctx = new VarNameContext(Context, State);
		EnterRule(_localctx, 56, RULE_varName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266; qName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedExprContext : ParserRuleContext {
		public ExprSingleContext exprSingle() {
			return GetRuleContext<ExprSingleContext>(0);
		}
		public ParenthesizedExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesizedExprContext parenthesizedExpr() {
		ParenthesizedExprContext _localctx = new ParenthesizedExprContext(Context, State);
		EnterRule(_localctx, 58, RULE_parenthesizedExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268; Match(T__36);
			State = 269; exprSingle();
			State = 270; Match(T__37);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContextItemExprContext : ParserRuleContext {
		public ContextItemExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contextItemExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContextItemExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContextItemExprContext contextItemExpr() {
		ContextItemExprContext _localctx = new ContextItemExprContext(Context, State);
		EnterRule(_localctx, 60, RULE_contextItemExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; Match(T__38);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FunctionQNameContext functionQName() {
			return GetRuleContext<FunctionQNameContext>(0);
		}
		public ExprSingleContext[] exprSingle() {
			return GetRuleContexts<ExprSingleContext>();
		}
		public ExprSingleContext exprSingle(int i) {
			return GetRuleContext<ExprSingleContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 62, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; functionQName();
			{
			State = 275; Match(T__36);
			State = 284;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__35) | (1L << T__36) | (1L << T__38) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << Literal) | (1L << PITest) | (1L << AxisName) | (1L << NCName))) != 0)) {
				{
				State = 276; exprSingle();
				State = 281;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==T__39) {
					{
					{
					State = 277; Match(T__39);
					State = 278; exprSingle();
					}
					}
					State = 283;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 286; Match(T__37);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KindTestContext : ParserRuleContext {
		public ITerminalNode PITest() { return GetToken(XPath1W3Parser.PITest, 0); }
		public CommentTestContext commentTest() {
			return GetRuleContext<CommentTestContext>(0);
		}
		public TextTestContext textTest() {
			return GetRuleContext<TextTestContext>(0);
		}
		public AnyKindTestContext anyKindTest() {
			return GetRuleContext<AnyKindTestContext>(0);
		}
		public KindTestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kindTest; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKindTest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KindTestContext kindTest() {
		KindTestContext _localctx = new KindTestContext(Context, State);
		EnterRule(_localctx, 64, RULE_kindTest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			switch (TokenStream.La(1)) {
			case PITest:
				{
				State = 288; Match(PITest);
				}
				break;
			case T__42:
				{
				State = 289; commentTest();
				}
				break;
			case T__41:
				{
				State = 290; textTest();
				}
				break;
			case T__40:
				{
				State = 291; anyKindTest();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnyKindTestContext : ParserRuleContext {
		public AnyKindTestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anyKindTest; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnyKindTest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnyKindTestContext anyKindTest() {
		AnyKindTestContext _localctx = new AnyKindTestContext(Context, State);
		EnterRule(_localctx, 66, RULE_anyKindTest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294; Match(T__40);
			State = 295; Match(T__36);
			State = 296; Match(T__37);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextTestContext : ParserRuleContext {
		public TextTestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textTest; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextTest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextTestContext textTest() {
		TextTestContext _localctx = new TextTestContext(Context, State);
		EnterRule(_localctx, 68, RULE_textTest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298; Match(T__41);
			State = 299; Match(T__36);
			State = 300; Match(T__37);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentTestContext : ParserRuleContext {
		public CommentTestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentTest; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentTest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentTestContext commentTest() {
		CommentTestContext _localctx = new CommentTestContext(Context, State);
		EnterRule(_localctx, 70, RULE_commentTest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302; Match(T__42);
			State = 303; Match(T__36);
			State = 304; Match(T__37);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NCNameContext : ParserRuleContext {
		public ITerminalNode NCName() { return GetToken(XPath1W3Parser.NCName, 0); }
		public ITerminalNode AxisName() { return GetToken(XPath1W3Parser.AxisName, 0); }
		public NCNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nCName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNCName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NCNameContext nCName() {
		NCNameContext _localctx = new NCNameContext(Context, State);
		EnterRule(_localctx, 72, RULE_nCName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			_la = TokenStream.La(1);
			if ( !(_la==AxisName || _la==NCName) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QNameContext : ParserRuleContext {
		public NCNameContext[] nCName() {
			return GetRuleContexts<NCNameContext>();
		}
		public NCNameContext nCName(int i) {
			return GetRuleContext<NCNameContext>(i);
		}
		public QNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QNameContext qName() {
		QNameContext _localctx = new QNameContext(Context, State);
		EnterRule(_localctx, 74, RULE_qName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308; nCName();
			State = 311;
			_la = TokenStream.La(1);
			if (_la==T__32) {
				{
				State = 309; Match(T__32);
				State = 310; nCName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionQNameContext : ParserRuleContext {
		public QNameContext qName() {
			return GetRuleContext<QNameContext>(0);
		}
		public FunctionQNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionQName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1W3Visitor<TResult> typedVisitor = visitor as IXPath1W3Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionQName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionQNameContext functionQName() {
		FunctionQNameContext _localctx = new FunctionQNameContext(Context, State);
		EnterRule(_localctx, 76, RULE_functionQName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			switch (TokenStream.La(1)) {
			case AxisName:
			case NCName:
				{
				State = 313; qName();
				}
				break;
			case T__27:
				{
				State = 314; Match(T__27);
				}
				break;
			case T__30:
				{
				State = 315; Match(T__30);
				}
				break;
			case T__1:
				{
				State = 316; Match(T__1);
				}
				break;
			case T__19:
				{
				State = 317; Match(T__19);
				}
				break;
			case T__16:
				{
				State = 318; Match(T__16);
				}
				break;
			case T__18:
				{
				State = 319; Match(T__18);
				}
				break;
			case T__21:
				{
				State = 320; Match(T__21);
				}
				break;
			case T__11:
				{
				State = 321; Match(T__11);
				}
				break;
			case T__23:
				{
				State = 322; Match(T__23);
				}
				break;
			case T__22:
				{
				State = 323; Match(T__22);
				}
				break;
			case T__12:
				{
				State = 324; Match(T__12);
				}
				break;
			case T__24:
				{
				State = 325; Match(T__24);
				}
				break;
			case T__0:
				{
				State = 326; Match(T__0);
				}
				break;
			case T__26:
				{
				State = 327; Match(T__26);
				}
				break;
			case T__29:
				{
				State = 328; Match(T__29);
				}
				break;
			case T__28:
				{
				State = 329; Match(T__28);
				}
				break;
			case T__20:
				{
				State = 330; Match(T__20);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3;\x150\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x3\x2\x3\x2\x5"+
		"\x2S\n\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\a\x5\\\n\x5\f\x5\xE"+
		"\x5_\v\x5\x3\x6\x3\x6\x3\x6\a\x6\x64\n\x6\f\x6\xE\x6g\v\x6\x3\a\x3\a\x3"+
		"\a\a\al\n\a\f\a\xE\ao\v\a\x3\b\x3\b\x3\b\a\bt\n\b\f\b\xE\bw\v\b\x3\t\x3"+
		"\t\x3\t\a\t|\n\t\f\t\xE\t\x7F\v\t\x3\n\x3\n\x3\n\x5\n\x84\n\n\x3\v\a\v"+
		"\x87\n\v\f\v\xE\v\x8A\v\v\x3\v\x3\v\x3\f\x3\f\x3\f\a\f\x91\n\f\f\f\xE"+
		"\f\x94\v\f\x3\r\x3\r\a\r\x98\n\r\f\r\xE\r\x9B\v\r\x3\r\x3\r\x5\r\x9F\n"+
		"\r\x3\r\x5\r\xA2\n\r\x3\xE\x3\xE\x5\xE\xA6\n\xE\x3\xE\x3\xE\x3\xE\x5\xE"+
		"\xAB\n\xE\x3\xF\x3\xF\x3\xF\a\xF\xB0\n\xF\f\xF\xE\xF\xB3\v\xF\x3\x10\x3"+
		"\x10\x3\x10\x5\x10\xB8\n\x10\x3\x11\x3\x11\x5\x11\xBC\n\x11\x3\x11\a\x11"+
		"\xBF\n\x11\f\x11\xE\x11\xC2\v\x11\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\xC8"+
		"\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\xDA\n\x13\x3"+
		"\x14\x5\x14\xDD\n\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\xEE\n"+
		"\x16\x3\x17\x3\x17\x3\x18\x3\x18\x5\x18\xF4\n\x18\x3\x19\x3\x19\x5\x19"+
		"\xF8\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\xFE\n\x1A\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x108\n\x1C\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!"+
		"\x3!\x3!\x3!\a!\x11A\n!\f!\xE!\x11D\v!\x5!\x11F\n!\x3!\x3!\x3\"\x3\"\x3"+
		"\"\x3\"\x5\"\x127\n\"\x3#\x3#\x3#\x3#\x3$\x3$\x3$\x3$\x3%\x3%\x3%\x3%"+
		"\x3&\x3&\x3\'\x3\'\x3\'\x5\'\x13A\n\'\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3("+
		"\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x5(\x14E\n(\x3(\x2\x2)\x2\x4"+
		"\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36"+
		"\x38:<>@\x42\x44\x46HJLN\x2\b\x3\x2\x5\x6\x3\x2\a\n\x3\x2\v\f\x3\x2\r"+
		"\xF\x3\x2\x11\x12\x4\x2\x36\x36\x39\x39\x166\x2R\x3\x2\x2\x2\x4T\x3\x2"+
		"\x2\x2\x6V\x3\x2\x2\x2\bX\x3\x2\x2\x2\n`\x3\x2\x2\x2\fh\x3\x2\x2\x2\xE"+
		"p\x3\x2\x2\x2\x10x\x3\x2\x2\x2\x12\x80\x3\x2\x2\x2\x14\x88\x3\x2\x2\x2"+
		"\x16\x8D\x3\x2\x2\x2\x18\xA1\x3\x2\x2\x2\x1A\xAA\x3\x2\x2\x2\x1C\xAC\x3"+
		"\x2\x2\x2\x1E\xB7\x3\x2\x2\x2 \xBB\x3\x2\x2\x2\"\xC7\x3\x2\x2\x2$\xD9"+
		"\x3\x2\x2\x2&\xDC\x3\x2\x2\x2(\xE0\x3\x2\x2\x2*\xED\x3\x2\x2\x2,\xEF\x3"+
		"\x2\x2\x2.\xF3\x3\x2\x2\x2\x30\xF7\x3\x2\x2\x2\x32\xFD\x3\x2\x2\x2\x34"+
		"\xFF\x3\x2\x2\x2\x36\x107\x3\x2\x2\x2\x38\x109\x3\x2\x2\x2:\x10C\x3\x2"+
		"\x2\x2<\x10E\x3\x2\x2\x2>\x112\x3\x2\x2\x2@\x114\x3\x2\x2\x2\x42\x126"+
		"\x3\x2\x2\x2\x44\x128\x3\x2\x2\x2\x46\x12C\x3\x2\x2\x2H\x130\x3\x2\x2"+
		"\x2J\x134\x3\x2\x2\x2L\x136\x3\x2\x2\x2N\x14D\x3\x2\x2\x2PS\x5\x4\x3\x2"+
		"QS\a\x2\x2\x3RP\x3\x2\x2\x2RQ\x3\x2\x2\x2S\x3\x3\x2\x2\x2TU\x5\b\x5\x2"+
		"U\x5\x3\x2\x2\x2VW\x5\b\x5\x2W\a\x3\x2\x2\x2X]\x5\n\x6\x2YZ\a\x3\x2\x2"+
		"Z\\\x5\n\x6\x2[Y\x3\x2\x2\x2\\_\x3\x2\x2\x2][\x3\x2\x2\x2]^\x3\x2\x2\x2"+
		"^\t\x3\x2\x2\x2_]\x3\x2\x2\x2`\x65\x5\f\a\x2\x61\x62\a\x4\x2\x2\x62\x64"+
		"\x5\f\a\x2\x63\x61\x3\x2\x2\x2\x64g\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x65"+
		"\x66\x3\x2\x2\x2\x66\v\x3\x2\x2\x2g\x65\x3\x2\x2\x2hm\x5\xE\b\x2ij\t\x2"+
		"\x2\x2jl\x5\xE\b\x2ki\x3\x2\x2\x2lo\x3\x2\x2\x2mk\x3\x2\x2\x2mn\x3\x2"+
		"\x2\x2n\r\x3\x2\x2\x2om\x3\x2\x2\x2pu\x5\x10\t\x2qr\t\x3\x2\x2rt\x5\x10"+
		"\t\x2sq\x3\x2\x2\x2tw\x3\x2\x2\x2us\x3\x2\x2\x2uv\x3\x2\x2\x2v\xF\x3\x2"+
		"\x2\x2wu\x3\x2\x2\x2x}\x5\x12\n\x2yz\t\x4\x2\x2z|\x5\x12\n\x2{y\x3\x2"+
		"\x2\x2|\x7F\x3\x2\x2\x2}{\x3\x2\x2\x2}~\x3\x2\x2\x2~\x11\x3\x2\x2\x2\x7F"+
		"}\x3\x2\x2\x2\x80\x83\x5\x14\v\x2\x81\x82\t\x5\x2\x2\x82\x84\x5\x14\v"+
		"\x2\x83\x81\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84\x13\x3\x2\x2\x2\x85\x87"+
		"\a\f\x2\x2\x86\x85\x3\x2\x2\x2\x87\x8A\x3\x2\x2\x2\x88\x86\x3\x2\x2\x2"+
		"\x88\x89\x3\x2\x2\x2\x89\x8B\x3\x2\x2\x2\x8A\x88\x3\x2\x2\x2\x8B\x8C\x5"+
		"\x16\f\x2\x8C\x15\x3\x2\x2\x2\x8D\x92\x5\x18\r\x2\x8E\x8F\a\x10\x2\x2"+
		"\x8F\x91\x5\x18\r\x2\x90\x8E\x3\x2\x2\x2\x91\x94\x3\x2\x2\x2\x92\x90\x3"+
		"\x2\x2\x2\x92\x93\x3\x2\x2\x2\x93\x17\x3\x2\x2\x2\x94\x92\x3\x2\x2\x2"+
		"\x95\x99\x5\x36\x1C\x2\x96\x98\x5\x34\x1B\x2\x97\x96\x3\x2\x2\x2\x98\x9B"+
		"\x3\x2\x2\x2\x99\x97\x3\x2\x2\x2\x99\x9A\x3\x2\x2\x2\x9A\x9E\x3\x2\x2"+
		"\x2\x9B\x99\x3\x2\x2\x2\x9C\x9D\t\x6\x2\x2\x9D\x9F\x5\x1C\xF\x2\x9E\x9C"+
		"\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\xA2\x3\x2\x2\x2\xA0\xA2\x5\x1A\xE"+
		"\x2\xA1\x95\x3\x2\x2\x2\xA1\xA0\x3\x2\x2\x2\xA2\x19\x3\x2\x2\x2\xA3\xA5"+
		"\a\x11\x2\x2\xA4\xA6\x5\x1C\xF\x2\xA5\xA4\x3\x2\x2\x2\xA5\xA6\x3\x2\x2"+
		"\x2\xA6\xAB\x3\x2\x2\x2\xA7\xA8\a\x12\x2\x2\xA8\xAB\x5\x1C\xF\x2\xA9\xAB"+
		"\x5\x1C\xF\x2\xAA\xA3\x3\x2\x2\x2\xAA\xA7\x3\x2\x2\x2\xAA\xA9\x3\x2\x2"+
		"\x2\xAB\x1B\x3\x2\x2\x2\xAC\xB1\x5\x1E\x10\x2\xAD\xAE\t\x6\x2\x2\xAE\xB0"+
		"\x5\x1E\x10\x2\xAF\xAD\x3\x2\x2\x2\xB0\xB3\x3\x2\x2\x2\xB1\xAF\x3\x2\x2"+
		"\x2\xB1\xB2\x3\x2\x2\x2\xB2\x1D\x3\x2\x2\x2\xB3\xB1\x3\x2\x2\x2\xB4\xB8"+
		"\x5 \x11\x2\xB5\xB8\x5> \x2\xB6\xB8\x5,\x17\x2\xB7\xB4\x3\x2\x2\x2\xB7"+
		"\xB5\x3\x2\x2\x2\xB7\xB6\x3\x2\x2\x2\xB8\x1F\x3\x2\x2\x2\xB9\xBC\x5(\x15"+
		"\x2\xBA\xBC\x5\"\x12\x2\xBB\xB9\x3\x2\x2\x2\xBB\xBA\x3\x2\x2\x2\xBC\xC0"+
		"\x3\x2\x2\x2\xBD\xBF\x5\x34\x1B\x2\xBE\xBD\x3\x2\x2\x2\xBF\xC2\x3\x2\x2"+
		"\x2\xC0\xBE\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1!\x3\x2\x2\x2\xC2\xC0\x3"+
		"\x2\x2\x2\xC3\xC4\x5$\x13\x2\xC4\xC5\x5.\x18\x2\xC5\xC8\x3\x2\x2\x2\xC6"+
		"\xC8\x5&\x14\x2\xC7\xC3\x3\x2\x2\x2\xC7\xC6\x3\x2\x2\x2\xC8#\x3\x2\x2"+
		"\x2\xC9\xCA\a\x13\x2\x2\xCA\xDA\a\x14\x2\x2\xCB\xCC\a\x15\x2\x2\xCC\xDA"+
		"\a\x14\x2\x2\xCD\xCE\a\x16\x2\x2\xCE\xDA\a\x14\x2\x2\xCF\xD0\a\x17\x2"+
		"\x2\xD0\xDA\a\x14\x2\x2\xD1\xD2\a\x18\x2\x2\xD2\xDA\a\x14\x2\x2\xD3\xD4"+
		"\a\x19\x2\x2\xD4\xDA\a\x14\x2\x2\xD5\xD6\a\x1A\x2\x2\xD6\xDA\a\x14\x2"+
		"\x2\xD7\xD8\a\x1B\x2\x2\xD8\xDA\a\x14\x2\x2\xD9\xC9\x3\x2\x2\x2\xD9\xCB"+
		"\x3\x2\x2\x2\xD9\xCD\x3\x2\x2\x2\xD9\xCF\x3\x2\x2\x2\xD9\xD1\x3\x2\x2"+
		"\x2\xD9\xD3\x3\x2\x2\x2\xD9\xD5\x3\x2\x2\x2\xD9\xD7\x3\x2\x2\x2\xDA%\x3"+
		"\x2\x2\x2\xDB\xDD\a\x1C\x2\x2\xDC\xDB\x3\x2\x2\x2\xDC\xDD\x3\x2\x2\x2"+
		"\xDD\xDE\x3\x2\x2\x2\xDE\xDF\x5.\x18\x2\xDF\'\x3\x2\x2\x2\xE0\xE1\x5*"+
		"\x16\x2\xE1\xE2\x5.\x18\x2\xE2)\x3\x2\x2\x2\xE3\xE4\a\x1D\x2\x2\xE4\xEE"+
		"\a\x14\x2\x2\xE5\xE6\a\x1E\x2\x2\xE6\xEE\a\x14\x2\x2\xE7\xE8\a\x1F\x2"+
		"\x2\xE8\xEE\a\x14\x2\x2\xE9\xEA\a \x2\x2\xEA\xEE\a\x14\x2\x2\xEB\xEC\a"+
		"!\x2\x2\xEC\xEE\a\x14\x2\x2\xED\xE3\x3\x2\x2\x2\xED\xE5\x3\x2\x2\x2\xED"+
		"\xE7\x3\x2\x2\x2\xED\xE9\x3\x2\x2\x2\xED\xEB\x3\x2\x2\x2\xEE+\x3\x2\x2"+
		"\x2\xEF\xF0\a\"\x2\x2\xF0-\x3\x2\x2\x2\xF1\xF4\x5\x42\"\x2\xF2\xF4\x5"+
		"\x30\x19\x2\xF3\xF1\x3\x2\x2\x2\xF3\xF2\x3\x2\x2\x2\xF4/\x3\x2\x2\x2\xF5"+
		"\xF8\x5L\'\x2\xF6\xF8\x5\x32\x1A\x2\xF7\xF5\x3\x2\x2\x2\xF7\xF6\x3\x2"+
		"\x2\x2\xF8\x31\x3\x2\x2\x2\xF9\xFE\a\r\x2\x2\xFA\xFB\a\x39\x2\x2\xFB\xFC"+
		"\a#\x2\x2\xFC\xFE\a\r\x2\x2\xFD\xF9\x3\x2\x2\x2\xFD\xFA\x3\x2\x2\x2\xFE"+
		"\x33\x3\x2\x2\x2\xFF\x100\a$\x2\x2\x100\x101\x5\x4\x3\x2\x101\x102\a%"+
		"\x2\x2\x102\x35\x3\x2\x2\x2\x103\x108\a.\x2\x2\x104\x108\x5\x38\x1D\x2"+
		"\x105\x108\x5<\x1F\x2\x106\x108\x5@!\x2\x107\x103\x3\x2\x2\x2\x107\x104"+
		"\x3\x2\x2\x2\x107\x105\x3\x2\x2\x2\x107\x106\x3\x2\x2\x2\x108\x37\x3\x2"+
		"\x2\x2\x109\x10A\a&\x2\x2\x10A\x10B\x5:\x1E\x2\x10B\x39\x3\x2\x2\x2\x10C"+
		"\x10D\x5L\'\x2\x10D;\x3\x2\x2\x2\x10E\x10F\a\'\x2\x2\x10F\x110\x5\x4\x3"+
		"\x2\x110\x111\a(\x2\x2\x111=\x3\x2\x2\x2\x112\x113\a)\x2\x2\x113?\x3\x2"+
		"\x2\x2\x114\x115\x5N(\x2\x115\x11E\a\'\x2\x2\x116\x11B\x5\x4\x3\x2\x117"+
		"\x118\a*\x2\x2\x118\x11A\x5\x4\x3\x2\x119\x117\x3\x2\x2\x2\x11A\x11D\x3"+
		"\x2\x2\x2\x11B\x119\x3\x2\x2\x2\x11B\x11C\x3\x2\x2\x2\x11C\x11F\x3\x2"+
		"\x2\x2\x11D\x11B\x3\x2\x2\x2\x11E\x116\x3\x2\x2\x2\x11E\x11F\x3\x2\x2"+
		"\x2\x11F\x120\x3\x2\x2\x2\x120\x121\a(\x2\x2\x121\x41\x3\x2\x2\x2\x122"+
		"\x127\a\x30\x2\x2\x123\x127\x5H%\x2\x124\x127\x5\x46$\x2\x125\x127\x5"+
		"\x44#\x2\x126\x122\x3\x2\x2\x2\x126\x123\x3\x2\x2\x2\x126\x124\x3\x2\x2"+
		"\x2\x126\x125\x3\x2\x2\x2\x127\x43\x3\x2\x2\x2\x128\x129\a+\x2\x2\x129"+
		"\x12A\a\'\x2\x2\x12A\x12B\a(\x2\x2\x12B\x45\x3\x2\x2\x2\x12C\x12D\a,\x2"+
		"\x2\x12D\x12E\a\'\x2\x2\x12E\x12F\a(\x2\x2\x12FG\x3\x2\x2\x2\x130\x131"+
		"\a-\x2\x2\x131\x132\a\'\x2\x2\x132\x133\a(\x2\x2\x133I\x3\x2\x2\x2\x134"+
		"\x135\t\a\x2\x2\x135K\x3\x2\x2\x2\x136\x139\x5J&\x2\x137\x138\a#\x2\x2"+
		"\x138\x13A\x5J&\x2\x139\x137\x3\x2\x2\x2\x139\x13A\x3\x2\x2\x2\x13AM\x3"+
		"\x2\x2\x2\x13B\x14E\x5L\'\x2\x13C\x14E\a\x1E\x2\x2\x13D\x14E\a!\x2\x2"+
		"\x13E\x14E\a\x4\x2\x2\x13F\x14E\a\x16\x2\x2\x140\x14E\a\x13\x2\x2\x141"+
		"\x14E\a\x15\x2\x2\x142\x14E\a\x18\x2\x2\x143\x14E\a\xE\x2\x2\x144\x14E"+
		"\a\x1A\x2\x2\x145\x14E\a\x19\x2\x2\x146\x14E\a\xF\x2\x2\x147\x14E\a\x1B"+
		"\x2\x2\x148\x14E\a\x3\x2\x2\x149\x14E\a\x1D\x2\x2\x14A\x14E\a \x2\x2\x14B"+
		"\x14E\a\x1F\x2\x2\x14C\x14E\a\x17\x2\x2\x14D\x13B\x3\x2\x2\x2\x14D\x13C"+
		"\x3\x2\x2\x2\x14D\x13D\x3\x2\x2\x2\x14D\x13E\x3\x2\x2\x2\x14D\x13F\x3"+
		"\x2\x2\x2\x14D\x140\x3\x2\x2\x2\x14D\x141\x3\x2\x2\x2\x14D\x142\x3\x2"+
		"\x2\x2\x14D\x143\x3\x2\x2\x2\x14D\x144\x3\x2\x2\x2\x14D\x145\x3\x2\x2"+
		"\x2\x14D\x146\x3\x2\x2\x2\x14D\x147\x3\x2\x2\x2\x14D\x148\x3\x2\x2\x2"+
		"\x14D\x149\x3\x2\x2\x2\x14D\x14A\x3\x2\x2\x2\x14D\x14B\x3\x2\x2\x2\x14D"+
		"\x14C\x3\x2\x2\x2\x14EO\x3\x2\x2\x2!R]\x65mu}\x83\x88\x92\x99\x9E\xA1"+
		"\xA5\xAA\xB1\xB7\xBB\xC0\xC7\xD9\xDC\xED\xF3\xF7\xFD\x107\x11B\x11E\x126"+
		"\x139\x14D";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
