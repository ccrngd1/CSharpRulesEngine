//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from XPath1.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class XPath1Parser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, PATHSEP=9, 
		ABRPATH=10, LPAR=11, RPAR=12, LBRAC=13, RBRAC=14, MINUS=15, PLUS=16, DOT=17, 
		MUL=18, DOTDOT=19, AT=20, COMMA=21, PIPE=22, LESS=23, MORE=24, LE=25, 
		GE=26, COLON=27, CC=28, APOS=29, QUOT=30, NodeType=31, Number=32, AxisName=33, 
		Literal=34, WS=35, NCName=36;
	public const int
		RULE_main = 0, RULE_locationPath = 1, RULE_absoluteLocationPathNoroot = 2, 
		RULE_relativeLocationPath = 3, RULE_step = 4, RULE_axisSpecifier = 5, 
		RULE_nodeTest = 6, RULE_predicate = 7, RULE_abbreviatedStep = 8, RULE_expr = 9, 
		RULE_primaryExpr = 10, RULE_functionCall = 11, RULE_unionExprNoRoot = 12, 
		RULE_pathExprNoRoot = 13, RULE_filterExpr = 14, RULE_orExpr = 15, RULE_andExpr = 16, 
		RULE_equalityExpr = 17, RULE_relationalExpr = 18, RULE_additiveExpr = 19, 
		RULE_multiplicativeExpr = 20, RULE_unaryExprNoRoot = 21, RULE_qName = 22, 
		RULE_functionName = 23, RULE_variableReference = 24, RULE_nameTest = 25, 
		RULE_nCName = 26;
	public static readonly string[] ruleNames = {
		"main", "locationPath", "absoluteLocationPathNoroot", "relativeLocationPath", 
		"step", "axisSpecifier", "nodeTest", "predicate", "abbreviatedStep", "expr", 
		"primaryExpr", "functionCall", "unionExprNoRoot", "pathExprNoRoot", "filterExpr", 
		"orExpr", "andExpr", "equalityExpr", "relationalExpr", "additiveExpr", 
		"multiplicativeExpr", "unaryExprNoRoot", "qName", "functionName", "variableReference", 
		"nameTest", "nCName"
	};

	private static readonly string[] _LiteralNames = {
		null, "'processing-instruction'", "' or '", "' and '", "'='", "'!='", 
		"'div'", "'mod'", "'$'", "'/'", "'//'", "'('", "')'", "'['", "']'", "'-'", 
		"'+'", "'.'", "'*'", "'..'", "'@'", "','", "'|'", "'<'", "'>'", "'<='", 
		"'>='", "':'", "'::'", "'''", "'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "PATHSEP", "ABRPATH", 
		"LPAR", "RPAR", "LBRAC", "RBRAC", "MINUS", "PLUS", "DOT", "MUL", "DOTDOT", 
		"AT", "COMMA", "PIPE", "LESS", "MORE", "LE", "GE", "COLON", "CC", "APOS", 
		"QUOT", "NodeType", "Number", "AxisName", "Literal", "WS", "NCName"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "XPath1.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public XPath1Parser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class MainContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1Visitor<TResult> typedVisitor = visitor as IXPath1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocationPathContext : ParserRuleContext {
		public RelativeLocationPathContext relativeLocationPath() {
			return GetRuleContext<RelativeLocationPathContext>(0);
		}
		public AbsoluteLocationPathNorootContext absoluteLocationPathNoroot() {
			return GetRuleContext<AbsoluteLocationPathNorootContext>(0);
		}
		public LocationPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locationPath; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1Visitor<TResult> typedVisitor = visitor as IXPath1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocationPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocationPathContext locationPath() {
		LocationPathContext _localctx = new LocationPathContext(Context, State);
		EnterRule(_localctx, 2, RULE_locationPath);
		try {
			State = 58;
			switch (TokenStream.La(1)) {
			case T__0:
			case DOT:
			case MUL:
			case DOTDOT:
			case AT:
			case NodeType:
			case AxisName:
			case NCName:
				EnterOuterAlt(_localctx, 1);
				{
				State = 56; relativeLocationPath();
				}
				break;
			case PATHSEP:
			case ABRPATH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57; absoluteLocationPathNoroot();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbsoluteLocationPathNorootContext : ParserRuleContext {
		public ITerminalNode PATHSEP() { return GetToken(XPath1Parser.PATHSEP, 0); }
		public RelativeLocationPathContext relativeLocationPath() {
			return GetRuleContext<RelativeLocationPathContext>(0);
		}
		public AbsoluteLocationPathNorootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_absoluteLocationPathNoroot; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1Visitor<TResult> typedVisitor = visitor as IXPath1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbsoluteLocationPathNoroot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbsoluteLocationPathNorootContext absoluteLocationPathNoroot() {
		AbsoluteLocationPathNorootContext _localctx = new AbsoluteLocationPathNorootContext(Context, State);
		EnterRule(_localctx, 4, RULE_absoluteLocationPathNoroot);
		try {
			State = 64;
			switch (TokenStream.La(1)) {
			case PATHSEP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 60; Match(PATHSEP);
				State = 61; relativeLocationPath();
				}
				break;
			case ABRPATH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 62; Match(ABRPATH);
				State = 63; relativeLocationPath();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelativeLocationPathContext : ParserRuleContext {
		public StepContext[] step() {
			return GetRuleContexts<StepContext>();
		}
		public StepContext step(int i) {
			return GetRuleContext<StepContext>(i);
		}
		public ITerminalNode[] PATHSEP() { return GetTokens(XPath1Parser.PATHSEP); }
		public ITerminalNode PATHSEP(int i) {
			return GetToken(XPath1Parser.PATHSEP, i);
		}
		public ITerminalNode[] ABRPATH() { return GetTokens(XPath1Parser.ABRPATH); }
		public ITerminalNode ABRPATH(int i) {
			return GetToken(XPath1Parser.ABRPATH, i);
		}
		public RelativeLocationPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relativeLocationPath; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1Visitor<TResult> typedVisitor = visitor as IXPath1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelativeLocationPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelativeLocationPathContext relativeLocationPath() {
		RelativeLocationPathContext _localctx = new RelativeLocationPathContext(Context, State);
		EnterRule(_localctx, 6, RULE_relativeLocationPath);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; step();
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==PATHSEP || _la==ABRPATH) {
				{
				{
				State = 67;
				_la = TokenStream.La(1);
				if ( !(_la==PATHSEP || _la==ABRPATH) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 68; step();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StepContext : ParserRuleContext {
		public AxisSpecifierContext axisSpecifier() {
			return GetRuleContext<AxisSpecifierContext>(0);
		}
		public NodeTestContext nodeTest() {
			return GetRuleContext<NodeTestContext>(0);
		}
		public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public AbbreviatedStepContext abbreviatedStep() {
			return GetRuleContext<AbbreviatedStepContext>(0);
		}
		public StepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_step; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1Visitor<TResult> typedVisitor = visitor as IXPath1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepContext step() {
		StepContext _localctx = new StepContext(Context, State);
		EnterRule(_localctx, 8, RULE_step);
		int _la;
		try {
			State = 83;
			switch (TokenStream.La(1)) {
			case T__0:
			case MUL:
			case AT:
			case NodeType:
			case AxisName:
			case NCName:
				EnterOuterAlt(_localctx, 1);
				{
				State = 74; axisSpecifier();
				State = 75; nodeTest();
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==LBRAC) {
					{
					{
					State = 76; predicate();
					}
					}
					State = 81;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case DOT:
			case DOTDOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 82; abbreviatedStep();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AxisSpecifierContext : ParserRuleContext {
		public ITerminalNode AxisName() { return GetToken(XPath1Parser.AxisName, 0); }
		public AxisSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_axisSpecifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1Visitor<TResult> typedVisitor = visitor as IXPath1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAxisSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AxisSpecifierContext axisSpecifier() {
		AxisSpecifierContext _localctx = new AxisSpecifierContext(Context, State);
		EnterRule(_localctx, 10, RULE_axisSpecifier);
		int _la;
		try {
			State = 90;
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 85; Match(AxisName);
				State = 86; Match(CC);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88;
				_la = TokenStream.La(1);
				if (_la==AT) {
					{
					State = 87; Match(AT);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeTestContext : ParserRuleContext {
		public NameTestContext nameTest() {
			return GetRuleContext<NameTestContext>(0);
		}
		public ITerminalNode NodeType() { return GetToken(XPath1Parser.NodeType, 0); }
		public ITerminalNode Literal() { return GetToken(XPath1Parser.Literal, 0); }
		public NodeTestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodeTest; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1Visitor<TResult> typedVisitor = visitor as IXPath1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodeTest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodeTestContext nodeTest() {
		NodeTestContext _localctx = new NodeTestContext(Context, State);
		EnterRule(_localctx, 12, RULE_nodeTest);
		try {
			State = 100;
			switch (TokenStream.La(1)) {
			case MUL:
			case AxisName:
			case NCName:
				EnterOuterAlt(_localctx, 1);
				{
				State = 92; nameTest();
				}
				break;
			case NodeType:
				EnterOuterAlt(_localctx, 2);
				{
				State = 93; Match(NodeType);
				State = 94; Match(LPAR);
				State = 95; Match(RPAR);
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 3);
				{
				State = 96; Match(T__0);
				State = 97; Match(LPAR);
				State = 98; Match(Literal);
				State = 99; Match(RPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1Visitor<TResult> typedVisitor = visitor as IXPath1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 14, RULE_predicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(LBRAC);
			State = 103; expr();
			State = 104; Match(RBRAC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbbreviatedStepContext : ParserRuleContext {
		public AbbreviatedStepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abbreviatedStep; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1Visitor<TResult> typedVisitor = visitor as IXPath1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbbreviatedStep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbbreviatedStepContext abbreviatedStep() {
		AbbreviatedStepContext _localctx = new AbbreviatedStepContext(Context, State);
		EnterRule(_localctx, 16, RULE_abbreviatedStep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			_la = TokenStream.La(1);
			if ( !(_la==DOT || _la==DOTDOT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public OrExprContext orExpr() {
			return GetRuleContext<OrExprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1Visitor<TResult> typedVisitor = visitor as IXPath1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 18, RULE_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; orExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExprContext : ParserRuleContext {
		public VariableReferenceContext variableReference() {
			return GetRuleContext<VariableReferenceContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode Literal() { return GetToken(XPath1Parser.Literal, 0); }
		public ITerminalNode Number() { return GetToken(XPath1Parser.Number, 0); }
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public PrimaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1Visitor<TResult> typedVisitor = visitor as IXPath1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExprContext primaryExpr() {
		PrimaryExprContext _localctx = new PrimaryExprContext(Context, State);
		EnterRule(_localctx, 20, RULE_primaryExpr);
		try {
			State = 118;
			switch (TokenStream.La(1)) {
			case T__7:
				EnterOuterAlt(_localctx, 1);
				{
				State = 110; variableReference();
				}
				break;
			case LPAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 111; Match(LPAR);
				State = 112; expr();
				State = 113; Match(RPAR);
				}
				break;
			case Literal:
				EnterOuterAlt(_localctx, 3);
				{
				State = 115; Match(Literal);
				}
				break;
			case Number:
				EnterOuterAlt(_localctx, 4);
				{
				State = 116; Match(Number);
				}
				break;
			case AxisName:
			case NCName:
				EnterOuterAlt(_localctx, 5);
				{
				State = 117; functionCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1Visitor<TResult> typedVisitor = visitor as IXPath1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 22, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; functionName();
			State = 121; Match(LPAR);
			State = 130;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__7) | (1L << PATHSEP) | (1L << ABRPATH) | (1L << LPAR) | (1L << MINUS) | (1L << DOT) | (1L << MUL) | (1L << DOTDOT) | (1L << AT) | (1L << NodeType) | (1L << Number) | (1L << AxisName) | (1L << Literal) | (1L << NCName))) != 0)) {
				{
				State = 122; expr();
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 123; Match(COMMA);
					State = 124; expr();
					}
					}
					State = 129;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 132; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionExprNoRootContext : ParserRuleContext {
		public PathExprNoRootContext pathExprNoRoot() {
			return GetRuleContext<PathExprNoRootContext>(0);
		}
		public UnionExprNoRootContext unionExprNoRoot() {
			return GetRuleContext<UnionExprNoRootContext>(0);
		}
		public ITerminalNode PATHSEP() { return GetToken(XPath1Parser.PATHSEP, 0); }
		public UnionExprNoRootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionExprNoRoot; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1Visitor<TResult> typedVisitor = visitor as IXPath1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionExprNoRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionExprNoRootContext unionExprNoRoot() {
		UnionExprNoRootContext _localctx = new UnionExprNoRootContext(Context, State);
		EnterRule(_localctx, 24, RULE_unionExprNoRoot);
		int _la;
		try {
			State = 142;
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 134; pathExprNoRoot();
				State = 137;
				_la = TokenStream.La(1);
				if (_la==PIPE) {
					{
					State = 135; Match(PIPE);
					State = 136; unionExprNoRoot();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 139; Match(PATHSEP);
				State = 140; Match(PIPE);
				State = 141; unionExprNoRoot();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathExprNoRootContext : ParserRuleContext {
		public LocationPathContext locationPath() {
			return GetRuleContext<LocationPathContext>(0);
		}
		public FilterExprContext filterExpr() {
			return GetRuleContext<FilterExprContext>(0);
		}
		public RelativeLocationPathContext relativeLocationPath() {
			return GetRuleContext<RelativeLocationPathContext>(0);
		}
		public ITerminalNode PATHSEP() { return GetToken(XPath1Parser.PATHSEP, 0); }
		public PathExprNoRootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathExprNoRoot; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1Visitor<TResult> typedVisitor = visitor as IXPath1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathExprNoRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathExprNoRootContext pathExprNoRoot() {
		PathExprNoRootContext _localctx = new PathExprNoRootContext(Context, State);
		EnterRule(_localctx, 26, RULE_pathExprNoRoot);
		int _la;
		try {
			State = 150;
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 144; locationPath();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 145; filterExpr();
				State = 148;
				_la = TokenStream.La(1);
				if (_la==PATHSEP || _la==ABRPATH) {
					{
					State = 146;
					_la = TokenStream.La(1);
					if ( !(_la==PATHSEP || _la==ABRPATH) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					State = 147; relativeLocationPath();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterExprContext : ParserRuleContext {
		public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public FilterExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1Visitor<TResult> typedVisitor = visitor as IXPath1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterExprContext filterExpr() {
		FilterExprContext _localctx = new FilterExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_filterExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; primaryExpr();
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==LBRAC) {
				{
				{
				State = 153; predicate();
				}
				}
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExprContext : ParserRuleContext {
		public AndExprContext[] andExpr() {
			return GetRuleContexts<AndExprContext>();
		}
		public AndExprContext andExpr(int i) {
			return GetRuleContext<AndExprContext>(i);
		}
		public OrExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1Visitor<TResult> typedVisitor = visitor as IXPath1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExprContext orExpr() {
		OrExprContext _localctx = new OrExprContext(Context, State);
		EnterRule(_localctx, 30, RULE_orExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159; andExpr();
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__1) {
				{
				{
				State = 160; Match(T__1);
				State = 161; andExpr();
				}
				}
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExprContext : ParserRuleContext {
		public EqualityExprContext[] equalityExpr() {
			return GetRuleContexts<EqualityExprContext>();
		}
		public EqualityExprContext equalityExpr(int i) {
			return GetRuleContext<EqualityExprContext>(i);
		}
		public AndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1Visitor<TResult> typedVisitor = visitor as IXPath1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExprContext andExpr() {
		AndExprContext _localctx = new AndExprContext(Context, State);
		EnterRule(_localctx, 32, RULE_andExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; equalityExpr();
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__2) {
				{
				{
				State = 168; Match(T__2);
				State = 169; equalityExpr();
				}
				}
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExprContext : ParserRuleContext {
		public RelationalExprContext[] relationalExpr() {
			return GetRuleContexts<RelationalExprContext>();
		}
		public RelationalExprContext relationalExpr(int i) {
			return GetRuleContext<RelationalExprContext>(i);
		}
		public EqualityExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1Visitor<TResult> typedVisitor = visitor as IXPath1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExprContext equalityExpr() {
		EqualityExprContext _localctx = new EqualityExprContext(Context, State);
		EnterRule(_localctx, 34, RULE_equalityExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; relationalExpr();
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__3 || _la==T__4) {
				{
				{
				State = 176;
				_la = TokenStream.La(1);
				if ( !(_la==T__3 || _la==T__4) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 177; relationalExpr();
				}
				}
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExprContext : ParserRuleContext {
		public AdditiveExprContext[] additiveExpr() {
			return GetRuleContexts<AdditiveExprContext>();
		}
		public AdditiveExprContext additiveExpr(int i) {
			return GetRuleContext<AdditiveExprContext>(i);
		}
		public RelationalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1Visitor<TResult> typedVisitor = visitor as IXPath1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExprContext relationalExpr() {
		RelationalExprContext _localctx = new RelationalExprContext(Context, State);
		EnterRule(_localctx, 36, RULE_relationalExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; additiveExpr();
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LESS) | (1L << MORE) | (1L << LE) | (1L << GE))) != 0)) {
				{
				{
				State = 184;
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LESS) | (1L << MORE) | (1L << LE) | (1L << GE))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 185; additiveExpr();
				}
				}
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExprContext : ParserRuleContext {
		public MultiplicativeExprContext[] multiplicativeExpr() {
			return GetRuleContexts<MultiplicativeExprContext>();
		}
		public MultiplicativeExprContext multiplicativeExpr(int i) {
			return GetRuleContext<MultiplicativeExprContext>(i);
		}
		public AdditiveExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1Visitor<TResult> typedVisitor = visitor as IXPath1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExprContext additiveExpr() {
		AdditiveExprContext _localctx = new AdditiveExprContext(Context, State);
		EnterRule(_localctx, 38, RULE_additiveExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; multiplicativeExpr();
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==MINUS || _la==PLUS) {
				{
				{
				State = 192;
				_la = TokenStream.La(1);
				if ( !(_la==MINUS || _la==PLUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 193; multiplicativeExpr();
				}
				}
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExprContext : ParserRuleContext {
		public UnaryExprNoRootContext unaryExprNoRoot() {
			return GetRuleContext<UnaryExprNoRootContext>(0);
		}
		public MultiplicativeExprContext multiplicativeExpr() {
			return GetRuleContext<MultiplicativeExprContext>(0);
		}
		public MultiplicativeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1Visitor<TResult> typedVisitor = visitor as IXPath1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExprContext multiplicativeExpr() {
		MultiplicativeExprContext _localctx = new MultiplicativeExprContext(Context, State);
		EnterRule(_localctx, 40, RULE_multiplicativeExpr);
		int _la;
		try {
			State = 209;
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 199; unaryExprNoRoot();
				State = 202;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << MUL))) != 0)) {
					{
					State = 200;
					_la = TokenStream.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << MUL))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					State = 201; multiplicativeExpr();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 204; Match(PATHSEP);
				State = 207;
				_la = TokenStream.La(1);
				if (_la==T__5 || _la==T__6) {
					{
					State = 205;
					_la = TokenStream.La(1);
					if ( !(_la==T__5 || _la==T__6) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					State = 206; multiplicativeExpr();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExprNoRootContext : ParserRuleContext {
		public UnionExprNoRootContext unionExprNoRoot() {
			return GetRuleContext<UnionExprNoRootContext>(0);
		}
		public UnaryExprNoRootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExprNoRoot; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1Visitor<TResult> typedVisitor = visitor as IXPath1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExprNoRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExprNoRootContext unaryExprNoRoot() {
		UnaryExprNoRootContext _localctx = new UnaryExprNoRootContext(Context, State);
		EnterRule(_localctx, 42, RULE_unaryExprNoRoot);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==MINUS) {
				{
				{
				State = 211; Match(MINUS);
				}
				}
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 217; unionExprNoRoot();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QNameContext : ParserRuleContext {
		public NCNameContext[] nCName() {
			return GetRuleContexts<NCNameContext>();
		}
		public NCNameContext nCName(int i) {
			return GetRuleContext<NCNameContext>(i);
		}
		public QNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1Visitor<TResult> typedVisitor = visitor as IXPath1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QNameContext qName() {
		QNameContext _localctx = new QNameContext(Context, State);
		EnterRule(_localctx, 44, RULE_qName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219; nCName();
			State = 222;
			_la = TokenStream.La(1);
			if (_la==COLON) {
				{
				State = 220; Match(COLON);
				State = 221; nCName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		public QNameContext qName() {
			return GetRuleContext<QNameContext>(0);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1Visitor<TResult> typedVisitor = visitor as IXPath1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(Context, State);
		EnterRule(_localctx, 46, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; qName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableReferenceContext : ParserRuleContext {
		public QNameContext qName() {
			return GetRuleContext<QNameContext>(0);
		}
		public VariableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableReference; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1Visitor<TResult> typedVisitor = visitor as IXPath1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableReferenceContext variableReference() {
		VariableReferenceContext _localctx = new VariableReferenceContext(Context, State);
		EnterRule(_localctx, 48, RULE_variableReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226; Match(T__7);
			State = 227; qName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameTestContext : ParserRuleContext {
		public NCNameContext nCName() {
			return GetRuleContext<NCNameContext>(0);
		}
		public QNameContext qName() {
			return GetRuleContext<QNameContext>(0);
		}
		public NameTestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameTest; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1Visitor<TResult> typedVisitor = visitor as IXPath1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameTest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameTestContext nameTest() {
		NameTestContext _localctx = new NameTestContext(Context, State);
		EnterRule(_localctx, 50, RULE_nameTest);
		try {
			State = 235;
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 229; Match(MUL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 230; nCName();
				State = 231; Match(COLON);
				State = 232; Match(MUL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 234; qName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NCNameContext : ParserRuleContext {
		public ITerminalNode NCName() { return GetToken(XPath1Parser.NCName, 0); }
		public ITerminalNode AxisName() { return GetToken(XPath1Parser.AxisName, 0); }
		public NCNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nCName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXPath1Visitor<TResult> typedVisitor = visitor as IXPath1Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNCName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NCNameContext nCName() {
		NCNameContext _localctx = new NCNameContext(Context, State);
		EnterRule(_localctx, 52, RULE_nCName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			_la = TokenStream.La(1);
			if ( !(_la==AxisName || _la==NCName) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3&\xF2\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x3\x2\x3\x2\x3\x3\x3\x3\x5\x3=\n\x3\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x5\x4\x43\n\x4\x3\x5\x3\x5\x3\x5\a\x5H\n\x5\f\x5\xE\x5K\v\x5"+
		"\x3\x6\x3\x6\x3\x6\a\x6P\n\x6\f\x6\xE\x6S\v\x6\x3\x6\x5\x6V\n\x6\x3\a"+
		"\x3\a\x3\a\x5\a[\n\a\x5\a]\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x5\bg\n\b\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f"+
		"\x3\f\x3\f\x3\f\x3\f\x5\fy\n\f\x3\r\x3\r\x3\r\x3\r\x3\r\a\r\x80\n\r\f"+
		"\r\xE\r\x83\v\r\x5\r\x85\n\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x5\xE\x8C\n\xE"+
		"\x3\xE\x3\xE\x3\xE\x5\xE\x91\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x97\n"+
		"\xF\x5\xF\x99\n\xF\x3\x10\x3\x10\a\x10\x9D\n\x10\f\x10\xE\x10\xA0\v\x10"+
		"\x3\x11\x3\x11\x3\x11\a\x11\xA5\n\x11\f\x11\xE\x11\xA8\v\x11\x3\x12\x3"+
		"\x12\x3\x12\a\x12\xAD\n\x12\f\x12\xE\x12\xB0\v\x12\x3\x13\x3\x13\x3\x13"+
		"\a\x13\xB5\n\x13\f\x13\xE\x13\xB8\v\x13\x3\x14\x3\x14\x3\x14\a\x14\xBD"+
		"\n\x14\f\x14\xE\x14\xC0\v\x14\x3\x15\x3\x15\x3\x15\a\x15\xC5\n\x15\f\x15"+
		"\xE\x15\xC8\v\x15\x3\x16\x3\x16\x3\x16\x5\x16\xCD\n\x16\x3\x16\x3\x16"+
		"\x3\x16\x5\x16\xD2\n\x16\x5\x16\xD4\n\x16\x3\x17\a\x17\xD7\n\x17\f\x17"+
		"\xE\x17\xDA\v\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x5\x18\xE1\n\x18"+
		"\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x5\x1B\xEE\n\x1B\x3\x1C\x3\x1C\x3\x1C\x2\x2\x1D\x2\x4\x6\b\n\f"+
		"\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x2\n\x3\x2"+
		"\v\f\x4\x2\x13\x13\x15\x15\x3\x2\x6\a\x3\x2\x19\x1C\x3\x2\x11\x12\x4\x2"+
		"\b\t\x14\x14\x3\x2\b\t\x4\x2##&&\xF6\x2\x38\x3\x2\x2\x2\x4<\x3\x2\x2\x2"+
		"\x6\x42\x3\x2\x2\x2\b\x44\x3\x2\x2\x2\nU\x3\x2\x2\x2\f\\\x3\x2\x2\x2\xE"+
		"\x66\x3\x2\x2\x2\x10h\x3\x2\x2\x2\x12l\x3\x2\x2\x2\x14n\x3\x2\x2\x2\x16"+
		"x\x3\x2\x2\x2\x18z\x3\x2\x2\x2\x1A\x90\x3\x2\x2\x2\x1C\x98\x3\x2\x2\x2"+
		"\x1E\x9A\x3\x2\x2\x2 \xA1\x3\x2\x2\x2\"\xA9\x3\x2\x2\x2$\xB1\x3\x2\x2"+
		"\x2&\xB9\x3\x2\x2\x2(\xC1\x3\x2\x2\x2*\xD3\x3\x2\x2\x2,\xD8\x3\x2\x2\x2"+
		".\xDD\x3\x2\x2\x2\x30\xE2\x3\x2\x2\x2\x32\xE4\x3\x2\x2\x2\x34\xED\x3\x2"+
		"\x2\x2\x36\xEF\x3\x2\x2\x2\x38\x39\x5\x14\v\x2\x39\x3\x3\x2\x2\x2:=\x5"+
		"\b\x5\x2;=\x5\x6\x4\x2<:\x3\x2\x2\x2<;\x3\x2\x2\x2=\x5\x3\x2\x2\x2>?\a"+
		"\v\x2\x2?\x43\x5\b\x5\x2@\x41\a\f\x2\x2\x41\x43\x5\b\x5\x2\x42>\x3\x2"+
		"\x2\x2\x42@\x3\x2\x2\x2\x43\a\x3\x2\x2\x2\x44I\x5\n\x6\x2\x45\x46\t\x2"+
		"\x2\x2\x46H\x5\n\x6\x2G\x45\x3\x2\x2\x2HK\x3\x2\x2\x2IG\x3\x2\x2\x2IJ"+
		"\x3\x2\x2\x2J\t\x3\x2\x2\x2KI\x3\x2\x2\x2LM\x5\f\a\x2MQ\x5\xE\b\x2NP\x5"+
		"\x10\t\x2ON\x3\x2\x2\x2PS\x3\x2\x2\x2QO\x3\x2\x2\x2QR\x3\x2\x2\x2RV\x3"+
		"\x2\x2\x2SQ\x3\x2\x2\x2TV\x5\x12\n\x2UL\x3\x2\x2\x2UT\x3\x2\x2\x2V\v\x3"+
		"\x2\x2\x2WX\a#\x2\x2X]\a\x1E\x2\x2Y[\a\x16\x2\x2ZY\x3\x2\x2\x2Z[\x3\x2"+
		"\x2\x2[]\x3\x2\x2\x2\\W\x3\x2\x2\x2\\Z\x3\x2\x2\x2]\r\x3\x2\x2\x2^g\x5"+
		"\x34\x1B\x2_`\a!\x2\x2`\x61\a\r\x2\x2\x61g\a\xE\x2\x2\x62\x63\a\x3\x2"+
		"\x2\x63\x64\a\r\x2\x2\x64\x65\a$\x2\x2\x65g\a\xE\x2\x2\x66^\x3\x2\x2\x2"+
		"\x66_\x3\x2\x2\x2\x66\x62\x3\x2\x2\x2g\xF\x3\x2\x2\x2hi\a\xF\x2\x2ij\x5"+
		"\x14\v\x2jk\a\x10\x2\x2k\x11\x3\x2\x2\x2lm\t\x3\x2\x2m\x13\x3\x2\x2\x2"+
		"no\x5 \x11\x2o\x15\x3\x2\x2\x2py\x5\x32\x1A\x2qr\a\r\x2\x2rs\x5\x14\v"+
		"\x2st\a\xE\x2\x2ty\x3\x2\x2\x2uy\a$\x2\x2vy\a\"\x2\x2wy\x5\x18\r\x2xp"+
		"\x3\x2\x2\x2xq\x3\x2\x2\x2xu\x3\x2\x2\x2xv\x3\x2\x2\x2xw\x3\x2\x2\x2y"+
		"\x17\x3\x2\x2\x2z{\x5\x30\x19\x2{\x84\a\r\x2\x2|\x81\x5\x14\v\x2}~\a\x17"+
		"\x2\x2~\x80\x5\x14\v\x2\x7F}\x3\x2\x2\x2\x80\x83\x3\x2\x2\x2\x81\x7F\x3"+
		"\x2\x2\x2\x81\x82\x3\x2\x2\x2\x82\x85\x3\x2\x2\x2\x83\x81\x3\x2\x2\x2"+
		"\x84|\x3\x2\x2\x2\x84\x85\x3\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86\x87\a\xE"+
		"\x2\x2\x87\x19\x3\x2\x2\x2\x88\x8B\x5\x1C\xF\x2\x89\x8A\a\x18\x2\x2\x8A"+
		"\x8C\x5\x1A\xE\x2\x8B\x89\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\x91\x3\x2"+
		"\x2\x2\x8D\x8E\a\v\x2\x2\x8E\x8F\a\x18\x2\x2\x8F\x91\x5\x1A\xE\x2\x90"+
		"\x88\x3\x2\x2\x2\x90\x8D\x3\x2\x2\x2\x91\x1B\x3\x2\x2\x2\x92\x99\x5\x4"+
		"\x3\x2\x93\x96\x5\x1E\x10\x2\x94\x95\t\x2\x2\x2\x95\x97\x5\b\x5\x2\x96"+
		"\x94\x3\x2\x2\x2\x96\x97\x3\x2\x2\x2\x97\x99\x3\x2\x2\x2\x98\x92\x3\x2"+
		"\x2\x2\x98\x93\x3\x2\x2\x2\x99\x1D\x3\x2\x2\x2\x9A\x9E\x5\x16\f\x2\x9B"+
		"\x9D\x5\x10\t\x2\x9C\x9B\x3\x2\x2\x2\x9D\xA0\x3\x2\x2\x2\x9E\x9C\x3\x2"+
		"\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\x1F\x3\x2\x2\x2\xA0\x9E\x3\x2\x2\x2\xA1"+
		"\xA6\x5\"\x12\x2\xA2\xA3\a\x4\x2\x2\xA3\xA5\x5\"\x12\x2\xA4\xA2\x3\x2"+
		"\x2\x2\xA5\xA8\x3\x2\x2\x2\xA6\xA4\x3\x2\x2\x2\xA6\xA7\x3\x2\x2\x2\xA7"+
		"!\x3\x2\x2\x2\xA8\xA6\x3\x2\x2\x2\xA9\xAE\x5$\x13\x2\xAA\xAB\a\x5\x2\x2"+
		"\xAB\xAD\x5$\x13\x2\xAC\xAA\x3\x2\x2\x2\xAD\xB0\x3\x2\x2\x2\xAE\xAC\x3"+
		"\x2\x2\x2\xAE\xAF\x3\x2\x2\x2\xAF#\x3\x2\x2\x2\xB0\xAE\x3\x2\x2\x2\xB1"+
		"\xB6\x5&\x14\x2\xB2\xB3\t\x4\x2\x2\xB3\xB5\x5&\x14\x2\xB4\xB2\x3\x2\x2"+
		"\x2\xB5\xB8\x3\x2\x2\x2\xB6\xB4\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7%\x3"+
		"\x2\x2\x2\xB8\xB6\x3\x2\x2\x2\xB9\xBE\x5(\x15\x2\xBA\xBB\t\x5\x2\x2\xBB"+
		"\xBD\x5(\x15\x2\xBC\xBA\x3\x2\x2\x2\xBD\xC0\x3\x2\x2\x2\xBE\xBC\x3\x2"+
		"\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF\'\x3\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC1\xC6"+
		"\x5*\x16\x2\xC2\xC3\t\x6\x2\x2\xC3\xC5\x5*\x16\x2\xC4\xC2\x3\x2\x2\x2"+
		"\xC5\xC8\x3\x2\x2\x2\xC6\xC4\x3\x2\x2\x2\xC6\xC7\x3\x2\x2\x2\xC7)\x3\x2"+
		"\x2\x2\xC8\xC6\x3\x2\x2\x2\xC9\xCC\x5,\x17\x2\xCA\xCB\t\a\x2\x2\xCB\xCD"+
		"\x5*\x16\x2\xCC\xCA\x3\x2\x2\x2\xCC\xCD\x3\x2\x2\x2\xCD\xD4\x3\x2\x2\x2"+
		"\xCE\xD1\a\v\x2\x2\xCF\xD0\t\b\x2\x2\xD0\xD2\x5*\x16\x2\xD1\xCF\x3\x2"+
		"\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2\xD4\x3\x2\x2\x2\xD3\xC9\x3\x2\x2\x2\xD3"+
		"\xCE\x3\x2\x2\x2\xD4+\x3\x2\x2\x2\xD5\xD7\a\x11\x2\x2\xD6\xD5\x3\x2\x2"+
		"\x2\xD7\xDA\x3\x2\x2\x2\xD8\xD6\x3\x2\x2\x2\xD8\xD9\x3\x2\x2\x2\xD9\xDB"+
		"\x3\x2\x2\x2\xDA\xD8\x3\x2\x2\x2\xDB\xDC\x5\x1A\xE\x2\xDC-\x3\x2\x2\x2"+
		"\xDD\xE0\x5\x36\x1C\x2\xDE\xDF\a\x1D\x2\x2\xDF\xE1\x5\x36\x1C\x2\xE0\xDE"+
		"\x3\x2\x2\x2\xE0\xE1\x3\x2\x2\x2\xE1/\x3\x2\x2\x2\xE2\xE3\x5.\x18\x2\xE3"+
		"\x31\x3\x2\x2\x2\xE4\xE5\a\n\x2\x2\xE5\xE6\x5.\x18\x2\xE6\x33\x3\x2\x2"+
		"\x2\xE7\xEE\a\x14\x2\x2\xE8\xE9\x5\x36\x1C\x2\xE9\xEA\a\x1D\x2\x2\xEA"+
		"\xEB\a\x14\x2\x2\xEB\xEE\x3\x2\x2\x2\xEC\xEE\x5.\x18\x2\xED\xE7\x3\x2"+
		"\x2\x2\xED\xE8\x3\x2\x2\x2\xED\xEC\x3\x2\x2\x2\xEE\x35\x3\x2\x2\x2\xEF"+
		"\xF0\t\t\x2\x2\xF0\x37\x3\x2\x2\x2\x1D<\x42IQUZ\\\x66x\x81\x84\x8B\x90"+
		"\x96\x98\x9E\xA6\xAE\xB6\xBE\xC6\xCC\xD1\xD3\xD8\xE0\xED";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
